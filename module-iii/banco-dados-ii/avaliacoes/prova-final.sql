------------TABELA LEITOR----------------
CREATE TABLE LEITOR
(COD_LEITOR INT NOT NULL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL);

insert into leitor values
(1,'maria'),(2,'arthur'),(3,'thiago'),(4,'alana');

------------TABELA TÍTULO----------------
CREATE TABLE TITULO
(COD_TIT INT NOT NULL PRIMARY KEY,
NOME_TIT VARCHAR(50) NOT NULL);

insert into titulo values
(1,'sistemas de banco de dados'),
(2,'introdução a banco de dados'),
(3,'banco de dados');

------------TABELA LIVRO----------------
CREATE TABLE LIVRO
(COD_LIVRO INT NOT NULL PRIMARY KEY,
COD_TIT INT NOT NULL REFERENCES TITULO(COD_TIT));

insert into livro values
(1,1),(2,1),(3,2),(4,2),(5,3),(6,3);

------------TABELA EMPRÉSTIMO----------------
CREATE TABLE EMPRESTIMO
(COD_EMP INT NOT NULL PRIMARY KEY,
COD_LEITOR INT NOT NULL REFERENCES LEITOR(COD_LEITOR),
COD_LIVRO INT NOT NULL REFERENCES LIVRO(COD_LIVRO),
DT_EMP DATE,
DT_DEV DATE);

insert into emprestimo values
(1,1,1,'2024-09-20','2024-09-23'),
(2,2,2,'2024-09-23','2024-09-24');

------------TABELA RESERVA----------------
CREATE TABLE RESERVA
(COD_RES INT NOT NULL PRIMARY KEY,
COD_LEITOR INT NOT NULL REFERENCES LEITOR(COD_LEITOR),
COD_LIVRO INT NOT NULL REFERENCES LIVRO(COD_LIVRO),
STATUS VARCHAR(50) NOT NULL CHECK (STATUS='ativo' or STATUS='inativo'));

insert into reserva values 
(1,1,1,'ativo'),
(2,2,2,'ativo'),
(3,3,3,'inativo'),
(4,4,4,'inativo');

-- QUESTOES ------------------------------

-- 01 QUESTAO ----------------------------

CREATE OR REPLACE TRIGGER VERIFICA_EMPRESTIMO BEFORE INSERT
ON EMPRESTIMO FOR EACH ROW 
EXECUTE FUNCTION VERIFICA_CODIGO();

CREATE OR REPLACE TRIGGER VERIFICA_RESERVA BEFORE INSERT
ON RESERVA FOR EACH ROW 
EXECUTE FUNCTION VERIFICA_CODIGO();

CREATE OR REPLACE FUNCTION VERIFICA_CODIGO()
RETURNS TRIGGER AS $$
BEGIN
	IF NOT EXISTS(SELECT COD_LIVRO FROM LIVRO WHERE COD_LIVRO = NEW.COD_LIVRO) THEN
		RAISE EXCEPTION 'ERRO! Codigo de livro não existente!';
	END IF;
	IF NOT EXISTS(SELECT COD_LEITOR FROM LEITOR WHERE COD_LEITOR = NEW.COD_LEITOR) THEN
		RAISE EXCEPTION 'ERRO! Codigo de leitor não existente!';
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

-- 02 QUESTAO ----------------------------

CREATE OR REPLACE FUNCTION REALIZAR_EMPRESTIMO(NOME_LEITOR VARCHAR(50), COD INT)
RETURNS VOID AS $$
DECLARE
	OLD_COD_EMP INT;
	COD_LEITOR_FUNC INT;
	COD_RES_ATIVO INT;
	COD_LEITOR_ATIVO INT;
BEGIN
	SELECT MAX(COD_EMP) FROM EMPRESTIMO INTO OLD_COD_EMP;
	SELECT COD_LEITOR FROM LEITOR WHERE NOME ILIKE NOME_LEITOR INTO COD_LEITOR_FUNC;

	IF EXISTS(SELECT COD_RES FROM RESERVA WHERE COD_RES IN 
	(SELECT COD_RES FROM RESERVA WHERE COD_LIVRO = COD) AND STATUS ILIKE 'ativo') THEN
	
		SELECT COD_RES FROM RESERVA WHERE COD_RES IN 
		(SELECT COD_RES FROM RESERVA WHERE COD_LIVRO = COD) AND STATUS ILIKE 'ativo' INTO COD_RES_ATIVO;

		SELECT COD_LEITOR FROM RESERVA WHERE COD_RES = COD_RES_ATIVO INTO COD_LEITOR_ATIVO;
		
		IF (COD_LEITOR_FUNC IN (SELECT COD_LEITOR FROM RESERVA WHERE COD_RES = COD_RES_ATIVO)) THEN
			
			INSERT INTO EMPRESTIMO VALUES ((1 + (SELECT MAX(COD_EMP) FROM EMPRESTIMO)), COD_LEITOR_FUNC,COD,now(),NULL);
			UPDATE RESERVA SET STATUS = 'inativo' WHERE COD_RES = COD_RES_ATIVO AND COD_LEITOR = COD_LEITOR_ATIVO;

			ELSE RAISE EXCEPTION 'Existe um reserva para este livro, mas não foi feita por este leitor!';
			
		END IF;

		ELSE INSERT INTO EMPRESTIMO VALUES (OLD_COD_EMP + 1, COD_LEITOR_FUNC,COD,now(),NULL);
	END IF;
END;
$$ LANGUAGE 'plpgsql';

SELECT * FROM RESERVA;
SELECT * FROM EMPRESTIMO;
SELECT REALIZAR_EMPRESTIMO('thiago', 1);